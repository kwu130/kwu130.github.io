<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>Blog Title</title><link>https://kwu130.github.io</link><description>Blog description</description><copyright>Blog Title</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://github.githubassets.com/favicons/favicon.svg</url><title>avatar</title><link>https://kwu130.github.io</link></image><lastBuildDate>Sat, 27 Jul 2024 09:07:29 +0000</lastBuildDate><managingEditor>Blog Title</managingEditor><ttl>60</ttl><webMaster>Blog Title</webMaster><item><title>CUDA设备函数中的long double类型</title><link>https://kwu130.github.io/post/CUDA-she-bei-han-shu-zhong-de-long%20double-lei-xing.html</link><description># 背景&#13;
从CUDA设备端math函数声明中发现部分函数支持long double类型的参数，但实际在使用时nvcc编译却发出以下警告：&#13;
```&#13;
'long double' is treated as 'double' in device code&#13;
```&#13;
从字面意思上可以看出，在设备端代码中，CUDA将long double类型当做double类型来处理，那么实际情况是怎样的呢？&#13;
&#13;
# 测试&#13;
编译以下测试代码&#13;
```&#13;
#include &lt;iostream&gt;&#13;
#include &lt;cstdio&gt;&#13;
#include &lt;cuda_runtime.h&gt;&#13;
 &#13;
 &#13;
__global__&#13;
void kernel(long double * d_data) {&#13;
    long double x = 1.3;&#13;
    *d_data = x;&#13;
     &#13;
    printf('--------------- device --------------\n');&#13;
    char *ch = reinterpret_cast&lt;char*&gt;(d_data);&#13;
    for (int i = 0; i &lt; sizeof(long double); ++i) {&#13;
        printf('addr: %p value: %08x\n', &amp;(ch[i]), ch[i]);&#13;
    }&#13;
    printf('\n');&#13;
     &#13;
    double z = static_cast&lt;double&gt;(*d_data);&#13;
    ch = reinterpret_cast&lt;char*&gt;(&amp;z);&#13;
    for (int i = 0; i &lt; sizeof(double); ++i) {&#13;
        printf('addr: %p value: %08x\n', &amp;(ch[i]), ch[i]);&#13;
    }&#13;
    printf('\n');&#13;
}&#13;
 &#13;
int main() {&#13;
     &#13;
    long double *d_data;&#13;
    long double *h_data;&#13;
    h_data = (long double*)malloc(sizeof(long double));&#13;
    cudaMalloc((void**)&amp;d_data, sizeof(long double));&#13;
    kernel&lt;&lt;&lt;1, 1&gt;&gt;&gt;(d_data);&#13;
     &#13;
    cudaDeviceSynchronize();&#13;
    printf('--------------- host --------------\n');&#13;
 &#13;
    cudaMemcpy(h_data, d_data, sizeof(long double), cudaMemcpyDeviceToHost);&#13;
     &#13;
    char *ch = reinterpret_cast&lt;char*&gt;(h_data);&#13;
    for (int i = 0; i &lt; sizeof(long double); ++i) {&#13;
        printf('addr: %p value: %08x\n', &amp;ch[i], ch[i]);&#13;
    }&#13;
    printf('\n');&#13;
     &#13;
    double x = 1.3;&#13;
    ch = reinterpret_cast&lt;char*&gt;(&amp;x);&#13;
    for (int i = 0; i &lt; sizeof(double); ++i) {&#13;
        printf('addr: %p value: %08x\n', &amp;ch[i], ch[i]);&#13;
    }&#13;
    printf('\n');&#13;
     &#13;
 &#13;
    long double y = 1.3;&#13;
    ch = reinterpret_cast&lt;char*&gt;(&amp;y);&#13;
    for (int i = 0; i &lt; sizeof(long double); ++i) {&#13;
        printf('addr: %p value: %08x\n', &amp;ch[i], ch[i]);&#13;
    }&#13;
    printf('\n');&#13;
     &#13;
    double z = static_cast&lt;double&gt;(y);&#13;
    ch = reinterpret_cast&lt;char*&gt;(&amp;z);&#13;
    for (int i = 0; i &lt; sizeof(double); ++i) {&#13;
        printf('addr: %p value: %08x\n', &amp;ch[i], ch[i]);&#13;
    }&#13;
    printf('\n');&#13;
 &#13;
    return 0;&#13;
}&#13;
```&#13;
输出结果如下：&#13;
```&#13;
--------------- device --------------&#13;
addr: 0x7f2b80a00000 value: ffffffcd&#13;
addr: 0x7f2b80a00001 value: ffffffcc&#13;
addr: 0x7f2b80a00002 value: ffffffcc&#13;
addr: 0x7f2b80a00003 value: ffffffcc&#13;
addr: 0x7f2b80a00004 value: ffffffcc&#13;
addr: 0x7f2b80a00005 value: ffffffcc&#13;
addr: 0x7f2b80a00006 value: fffffff4&#13;
addr: 0x7f2b80a00007 value: 0000003f&#13;
addr: 0x7f2b80a00008 value: 00000000&#13;
addr: 0x7f2b80a00009 value: 00000000&#13;
addr: 0x7f2b80a0000a value: 00000000&#13;
addr: 0x7f2b80a0000b value: 00000000&#13;
addr: 0x7f2b80a0000c value: 00000000&#13;
addr: 0x7f2b80a0000d value: 00000000&#13;
addr: 0x7f2b80a0000e value: 00000000&#13;
addr: 0x7f2b80a0000f value: 00000000&#13;
 &#13;
addr: 0x7f2ba4fffd08 value: ffffffcd&#13;
addr: 0x7f2ba4fffd09 value: ffffffcc&#13;
addr: 0x7f2ba4fffd0a value: ffffffcc&#13;
addr: 0x7f2ba4fffd0b value: ffffffcc&#13;
addr: 0x7f2ba4fffd0c value: ffffffcc&#13;
addr: 0x7f2ba4fffd0d value: ffffffcc&#13;
addr: 0x7f2ba4fffd0e value: fffffff4&#13;
addr: 0x7f2ba4fffd0f value: 0000003f&#13;
 &#13;
--------------- host --------------&#13;
addr: 0x6bde20 value: ffffffcd&#13;
addr: 0x6bde21 value: ffffffcc&#13;
addr: 0x6bde22 value: ffffffcc&#13;
addr: 0x6bde23 value: ffffffcc&#13;
addr: 0x6bde24 value: ffffffcc&#13;
addr: 0x6bde25 value: ffffffcc&#13;
addr: 0x6bde26 value: fffffff4&#13;
addr: 0x6bde27 value: 0000003f&#13;
addr: 0x6bde28 value: 00000000&#13;
addr: 0x6bde29 value: 00000000&#13;
addr: 0x6bde2a value: 00000000&#13;
addr: 0x6bde2b value: 00000000&#13;
addr: 0x6bde2c value: 00000000&#13;
addr: 0x6bde2d value: 00000000&#13;
addr: 0x6bde2e value: 00000000&#13;
addr: 0x6bde2f value: 00000000&#13;
 &#13;
addr: 0x7ffdc0ff3b08 value: ffffffcd&#13;
addr: 0x7ffdc0ff3b09 value: ffffffcc&#13;
addr: 0x7ffdc0ff3b0a value: ffffffcc&#13;
addr: 0x7ffdc0ff3b0b value: ffffffcc&#13;
addr: 0x7ffdc0ff3b0c value: ffffffcc&#13;
addr: 0x7ffdc0ff3b0d value: ffffffcc&#13;
addr: 0x7ffdc0ff3b0e value: fffffff4&#13;
addr: 0x7ffdc0ff3b0f value: 0000003f&#13;
 &#13;
addr: 0x7ffdc0ff3af0 value: 00000000&#13;
addr: 0x7ffdc0ff3af1 value: 00000068&#13;
addr: 0x7ffdc0ff3af2 value: 00000066&#13;
addr: 0x7ffdc0ff3af3 value: 00000066&#13;
addr: 0x7ffdc0ff3af4 value: 00000066&#13;
addr: 0x7ffdc0ff3af5 value: 00000066&#13;
addr: 0x7ffdc0ff3af6 value: 00000066&#13;
addr: 0x7ffdc0ff3af7 value: ffffffa6&#13;
addr: 0x7ffdc0ff3af8 value: ffffffff&#13;
addr: 0x7ffdc0ff3af9 value: 0000003f&#13;
addr: 0x7ffdc0ff3afa value: 00000000&#13;
addr: 0x7ffdc0ff3afb value: 00000000&#13;
addr: 0x7ffdc0ff3afc value: 00000001&#13;
addr: 0x7ffdc0ff3afd value: 00000000&#13;
addr: 0x7ffdc0ff3afe value: 00000000&#13;
addr: 0x7ffdc0ff3aff value: 00000000&#13;
 &#13;
addr: 0x7ffdc0ff3ae8 value: ffffffcd&#13;
addr: 0x7ffdc0ff3ae9 value: ffffffcc&#13;
addr: 0x7ffdc0ff3aea value: ffffffcc&#13;
addr: 0x7ffdc0ff3aeb value: ffffffcc&#13;
addr: 0x7ffdc0ff3aec value: ffffffcc&#13;
addr: 0x7ffdc0ff3aed value: ffffffcc&#13;
addr: 0x7ffdc0ff3aee value: fffffff4&#13;
addr: 0x7ffdc0ff3aef value: 0000003f&#13;
```&#13;
现在我们结合输出来进行分析。</description><guid isPermaLink="true">https://kwu130.github.io/post/CUDA-she-bei-han-shu-zhong-de-long%20double-lei-xing.html</guid><pubDate>Sat, 27 Jul 2024 09:07:07 +0000</pubDate></item><item><title>Valgrind检测内存泄漏</title><link>https://kwu130.github.io/post/Valgrind-jian-ce-nei-cun-xie-lou.html</link><description># Valgrind介绍&#13;
Valgrind 可以用来检测程序是否有非法使用内存的问题，例如访问未初始化的内存、访问数组时越界、忘记释放动态内存等问题。</description><guid isPermaLink="true">https://kwu130.github.io/post/Valgrind-jian-ce-nei-cun-xie-lou.html</guid><pubDate>Sat, 27 Jul 2024 08:36:57 +0000</pubDate></item><item><title>vscode插件和开发设置</title><link>https://kwu130.github.io/post/vscode-cha-jian-he-kai-fa-she-zhi.html</link><description># 插件推荐&#13;
&#13;
## 语言相关&#13;
&#13;
### C/C++&#13;
&#13;
C/C++&#13;
C/C++ Extension Pack&#13;
C/C++ Themes&#13;
描述：C/C++ IntelliSense, debugging, and code browsing.&#13;
&#13;
CMake&#13;
CMake Tools&#13;
描述：CMake langage support for Visual Studio Code.&#13;
&#13;
### Python&#13;
&#13;
Python&#13;
Pylance&#13;
Python Debugger&#13;
描述：Python language support with extension access points for IntelliSense (Pylance), Debugging (Python Debugger), linting, formatting, refactoring, unit tests, and more.&#13;
&#13;
## 语言无关&#13;
Chinese (Simplified) (简体中文) Language Pack for Visual Studio Code&#13;
描述：Language pack extension for Chinese (Simplified).&#13;
&#13;
Code Runer&#13;
描述：Run code snippet or code file for multiple languages.&#13;
&#13;
Docker&#13;
描述：Makes it easy to create, manage, and debug containerized applications.&#13;
&#13;
Error Lens&#13;
描述：Improve highlighting of errors, warnings and other language diagnostics.&#13;
&#13;
GitLens — Git supercharged&#13;
描述：Supercharge Git and unlock untapped knowledge within your repository to better understand, write, and review code.&#13;
&#13;
One Dark Pro&#13;
描述：Atom's iconic One Dark theme for Visual Studio Code.&#13;
&#13;
Remote - SSH&#13;
Remote - SSH: Editing Configuration Files&#13;
Remote Explorer&#13;
描述：Open any folder on a remote machine using SSH and take advantage of VS Code's full feature set.&#13;
&#13;
Tabnine&#13;
描述：AI Autocomplete &amp; Chat for Javascript, Python, Typescript, PHP, Go, Java &amp; more.&#13;
&#13;
&#13;
# 开发设置&#13;
。</description><guid isPermaLink="true">https://kwu130.github.io/post/vscode-cha-jian-he-kai-fa-she-zhi.html</guid><pubDate>Mon, 01 Jul 2024 05:54:58 +0000</pubDate></item></channel></rss>